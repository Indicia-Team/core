services:
    # The postgres database container.
    postgres:
        # The postgres container is built by us so that we can include
        # the setup script for database initialisation.
        build: ./postgres
        environment:
            # The password for the postgres user (not indicia user)
            POSTGRES_PASSWORD: password
        volumes:
            # Persist the database in a named volume.
            - postgres:/var/lib/postgresql/data
            # Share a host folder so postgres can access UKSI data.
            - .:/var/docker
        ports:
            - "5432:5432"
        command: 
            # Enable logging to the volume.
            # (/var/lib/docker/volumes/indicia_postgres on a linux host)
            - "-c"
            - "log_destination=stderr"
            - "-c"
            - "logging_collector=on"
            - "-c"
            - "log_directory=log"
            - "-c"
            - "log_filename=postgresql-%Y-%m-%d_%H%M%S.log"
            - "-c"
            - "log_rotation_age=1d"
            - "-c"
            - "log_statement=all"

    # A container running pgAdmin to help us examine the database.
    # Accessible on http://localhost:8070
    # Login with the email and password configured below.
    pgadmin:
        # See https://hub.docker.com/r/dpage/pgadmin4/tags
        # for other versions available.
        image: dpage/pgadmin4
        environment:
            PGADMIN_DEFAULT_EMAIL: pgadmin@example.com
            PGADMIN_DEFAULT_PASSWORD: password
        volumes:
            # Persist configuration in a named volume.
            - pgadmin:/var/lib/pgadmin
        ports: 
            - "8070:80"

    # A fake mail server which allows the warehouse to send emails.
    # Received mail can be viewed at http://localhost:8025
    mailhog:
        image: mailhog/mailhog 
        ports:
            - "8025:8025"

    # The warehouse container.
    # Accessible on http://localhost:8080
    warehouse:
        build: ./warehouse
        environment:
            # Pass through settings for REST API.
            WAREHOUSE_API_USER: ${WAREHOUSE_API_USER}
            WAREHOUSE_API_SECRET: ${WAREHOUSE_API_SECRET}
            WAREHOUSE_API_PROJECT_OCC: ${WAREHOUSE_API_PROJECT_OCC}
            WAREHOUSE_API_PROJECT_OCC_DEL: ${WAREHOUSE_API_PROJECT_OCC_DEL}
            WAREHOUSE_API_PROJECT_OCC_ASSOC: ${WAREHOUSE_API_PROJECT_OCC_ASSOC}
            WAREHOUSE_API_PROJECT_SMP: ${WAREHOUSE_API_PROJECT_SMP}
            WAREHOUSE_API_PROJECT_SMP_DEL: ${WAREHOUSE_API_PROJECT_SMP_DEL}
            ELASTIC_URL: ${ELASTIC_URL}
        # Share the warehouse code between host and container
        volumes:
            - ..:/var/www/html/
        # Apache is configured to run on port 8080 in warehouse/setup.sh  
        ports: 
            - "8080:8080"

    # The Geoserver container
    # Accessible on http://localhost:8090
    geoserver:
        image: docker.osgeo.org/geoserver:2.23.2
        volumes:
            # Persist configuration in a named volume.
            - geoserver:/opt/geoserver_data
        ports:
            - "8090:8080"

    # The ElasticSearch container
    elastic:
        image: docker.elastic.co/elasticsearch/elasticsearch:${ELASTIC_VERSION}
        environment:
            # The password for the 'elastic' user.
            ELASTIC_PASSWORD: password
            # single-node disables bootstrap checks avoiding max virtual memory
            # areas vm.max_map_count is too low error. Also prevents any attempt
            # to join other clusters.
            discovery.type: single-node
            # Disable requirement for TLS encryption on interfaces so no
            # certificates need to be set up.
            xpack.security.enabled: 'false'
            # Limit Java heap size.
            # ES_JAVA_OPTS: "-Xms256m -Xmx256m"
        volumes:
            # Persist indexes in a named volume.
            - elastic:/usr/share/elasticsearch/data
        networks:
            default:
                # Alias required as Logstash doesn't like underscore in name.
                aliases:
                    - elastic01
        ports: 
            - "9200:9200"
        deploy:
            resources:
                limits:
                    memory: 1G

    # The Kibana container
    kibana:
        image: docker.elastic.co/kibana/kibana:${ELASTIC_VERSION}
        environment:
            # The url of the ElasticSearch server.
            ELASTICSEARCH_HOSTS: http://indicia_elastic_1:9200
            ELASTICSEARCH_USERNAME: kibana_system
            ELASTICSEARCH_PASSWORD: password
        ports: 
            - "5601:5601"
        depends_on:
            - elastic

    # The Logstash container
    logstash:
        build: 
            context: ./logstash
            args:
                ELASTIC_VERSION: ${ELASTIC_VERSION}
                WAREHOUSE_URL: ${WAREHOUSE_URL}
                WAREHOUSE_API_USER: ${WAREHOUSE_API_USER}
                WAREHOUSE_API_SECRET: ${WAREHOUSE_API_SECRET}
                WAREHOUSE_API_PROJECT_OCC: ${WAREHOUSE_API_PROJECT_OCC}
                WAREHOUSE_API_PROJECT_OCC_DEL: ${WAREHOUSE_API_PROJECT_OCC_DEL}
                WAREHOUSE_API_PROJECT_OCC_ASSOC: ${WAREHOUSE_API_PROJECT_OCC_ASSOC}
                WAREHOUSE_API_PROJECT_SMP: ${WAREHOUSE_API_PROJECT_SMP}
                WAREHOUSE_API_PROJECT_SMP_DEL: ${WAREHOUSE_API_PROJECT_SMP_DEL}
                ELASTIC_URL: ${ELASTIC_URL}
                WAREHOUSE_UNIQUE_NAME: ${WAREHOUSE_UNIQUE_NAME}
                LOGSTASH_USER: ${LOGSTASH_USER}
                LOGSTASH_PASSWORD: ${LOGSTASH_PASSWORD}
        environment:
            BUILDKIT_PROGRESS: ${BUILDKIT_PROGRESS}
            # By disabling monitorin of Logstash by xpack I am side-stepping
            # a difficulty with authentication.
            XPACK_MONITORING_ENABLED: 'false'
           # Limiting Java heap size. 4g to 8g recommended.
            LS_JAVA_OPTS: "-Xms2g -Xmx2g"
        depends_on:
            - elastic

volumes:
    postgres:
    pgadmin:
    geoserver:
    elastic:

networks:
    default: