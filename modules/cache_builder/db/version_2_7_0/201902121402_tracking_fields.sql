ALTER TABLE cache_occurrences_functional
ADD COLUMN tracking bigint;

ALTER TABLE cache_samples_functional
ADD COLUMN tracking bigint;

CREATE INDEX ix_cache_occurrences_functional_tracking ON cache_occurrences_functional(tracking);
CREATE INDEX ix_cache_samples_functional_tracking ON cache_samples_functional(tracking);

COMMENT ON COLUMN cache_occurrences_functional.tracking IS 'Autogenerated tracking number for updates. A report can grab all new or updated records by filtering on this value.';
COMMENT ON COLUMN cache_samples_functional.tracking IS 'Autogenerated tracking number for updates. A report can grab all new or updated records by filtering on this value.';

CREATE SEQUENCE cache_tracking_seq
  INCREMENT 1
  MINVALUE 1
  MAXVALUE 9223372036854775807
  START 1
  CACHE 1;

CREATE OR REPLACE FUNCTION cache_functional_changed() RETURNS TRIGGER
  LANGUAGE plpgsql
  AS $$
BEGIN
  NEW.tracking = nextval('cache_tracking_seq'::regclass);
  RETURN NEW;
END;
$$;

CREATE TRIGGER trigger_cache_occurrences_functional_changed
  BEFORE INSERT OR UPDATE ON cache_occurrences_functional
  FOR EACH ROW
  EXECUTE PROCEDURE cache_functional_changed();

CREATE TRIGGER trigger_cache_samples_functional_changed
  BEFORE INSERT OR UPDATE ON cache_samples_functional
  FOR EACH ROW
  EXECUTE PROCEDURE cache_functional_changed();
